name: Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  pre-setup:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Set up Python 3.10"
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: "Install pipenv"
        run: pip install pipenv

      - name: "Cache pipenv"
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - if: ${{ steps.cache-pipenv.outputs.cache-hit != 'true' }}
        name: "Install dependencies"
        run: pipenv install --dev

      - name: "Check cache status"
        run: |
          echo "Cache Key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}"
          pipenv run pip list
    
    outputs:
      cache-path: ${{ steps.cache-pipenv.outputs.cache-hit }}

  fmt:
    runs-on: ubuntu-latest
    needs: pre-setup
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Install pipenv"
        run: pip install pipenv
      
      - name: "Restore pipenv cache"
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: "Format code"
        run: make fmt

  linter:
    runs-on: ubuntu-latest
    needs: fmt
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Install pipenv"
        run: pip install pipenv

      - name: "Restore pipenv cache"
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: "Lint code"
        run: make lint

      - name: "Upload lint reports"
        uses: actions/upload-artifact@v3
        with:
          name: lints-reports
          path: reports/lint-reports/**

  test:
    runs-on: ubuntu-latest
    needs: fmt
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Install pipenv"
        run: pip install pipenv
      
      - name: "Restore pipenv cache"
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install dependencies"
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: "Run tests"
        run: make test

      - name: "Upload test reports"
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: reports/test-reports/**

  deploy:
    runs-on: ubuntu-latest
    needs:
      - linter
      - test

    env:
      GCP_ARTIFACT_REPOSITORY: ${{ vars.GCP_ARTIFACT_REPOSITORY }}
      GCP_APPLICATION: ${{ vars.GCP_APPLICATION }}
      GCP_PROJECT: ${{ vars.GCP_PROJECT }}
      REGION: ${{ vars.REGION }}
      REGISTRY_FORMAT: ${{ vars.REGISTRY_FORMAT }}

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Authenticate"
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.CICD_GOOGLE_CREDENTIALS }}

      - name: "Publish image"
        id: publish
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-${{ env.REGISTRY_FORMAT }}
          ./scripts/publish_image

      - name: "Deploy image"
        id: deploy
        run: |
          gcloud config set run/region ${{ env.REGION }}
          ./scripts/deploy_image
